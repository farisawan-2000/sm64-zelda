--- src/engine/surface_collision.c
+++ src/engine/surface_collision.c
@@ -26,10 +30,10 @@ static s32 find_wall_collisions_from_list(struct SurfaceNode *surfaceNode,
                                           struct WallCollisionData *data) {
     register struct Surface *surf;
     register f32 offset;
-    register f32 radius = data->radius;
-    register f32 x = data->x;
-    register f32 y = data->y + data->offsetY;
-    register f32 z = data->z;
+    register f32 radius = data->radius / BOUNDS_EXTENSION;
+    register f32 x = data->x / BOUNDS_EXTENSION;
+    register f32 y = (data->y + data->offsetY) / BOUNDS_EXTENSION;
+    register f32 z = data->z / BOUNDS_EXTENSION;
     register f32 px, pz;
     register f32 w1, w2, w3;
     register f32 y1, y2, y3;
@@ -143,8 +147,8 @@ static s32 find_wall_collisions_from_list(struct SurfaceNode *surfaceNode,
 
         //! (Wall Overlaps) Because this doesn't update the x and z local variables,
         //  multiple walls can push mario more than is required.
-        data->x += surf->normal.x * (radius - offset);
-        data->z += surf->normal.z * (radius - offset);
+        data->x += surf->normal.x * (radius - offset) * BOUNDS_EXTENSION;
+        data->z += surf->normal.z * (radius - offset) * BOUNDS_EXTENSION;
 
         //! (Unreferenced Walls) Since this only returns the first four walls,
         //  this can lead to wall interaction being missed. Typically unreferenced walls
@@ -191,8 +195,8 @@ s32 find_wall_collisions(struct WallCollisionData *colData) {
     struct SurfaceNode *node;
     s16 cellX, cellZ;
     s32 numCollisions = 0;
-    s16 x = colData->x;
-    s16 z = colData->z;
+    s16 x = colData->x / BOUNDS_EXTENSION;
+    s16 z = colData->z / BOUNDS_EXTENSION;
 
     colData->numWalls = 0;
 
@@ -286,7 +290,7 @@ static struct Surface *find_ceil_from_list(struct SurfaceNode *surfaceNode, s32
             }
 
             // Find the ceil height at the specific point.
-            height = -(x * nx + nz * z + oo) / ny;
+            height = -(x * nx + nz * z + oo) / ny * BOUNDS_EXTENSION;
 
             // Checks for ceiling interaction with a 78 unit buffer.
             //! (Exposed Ceilings) Because any point above a ceiling counts
@@ -321,15 +325,15 @@ f32 find_ceil(f32 posX, f32 posY, f32 posZ, struct Surface **pceil) {
     //! (Parallel Universes) Because position is casted to an s16, reaching higher
     // float locations  can return ceilings despite them not existing there.
     //(Dynamic ceilings will unload due to the range.)
-    x = (s16) posX;
+    x = (s16) posX / BOUNDS_EXTENSION;
     y = (s16) posY;
-    z = (s16) posZ;
+    z = (s16) posZ / BOUNDS_EXTENSION;
     *pceil = NULL;
 
-    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_MAX) {
+    if (x <= -LEVEL_BOUNDARY_EXTENDED_MAX || x >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
-    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_MAX) {
+    if (z <= -LEVEL_BOUNDARY_EXTENDED_MAX || z >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
 
@@ -393,7 +397,7 @@ f32 find_floor_height_and_data(f32 xPos, f32 yPos, f32 zPos, struct FloorGeometr
         sFloorGeo.normalX = floor->normal.x;
         sFloorGeo.normalY = floor->normal.y;
         sFloorGeo.normalZ = floor->normal.z;
-        sFloorGeo.originOffset = floor->originOffset;
+        sFloorGeo.originOffset = floor->originOffset * BOUNDS_EXTENSION;
 
         *floorGeo = &sFloorGeo;
     }
@@ -460,7 +464,7 @@ static struct Surface *find_floor_from_list(struct SurfaceNode *surfaceNode, s32
         }
 
         // Find the height of the floor at a given location.
-        height = -(x * nx + nz * z + oo) / ny;
+        height = -(x * nx + nz * z + oo) / ny * BOUNDS_EXTENSION;
         // Checks for floor interaction with a 78 unit buffer.
         if (y - (height + -78.0f) < 0.0f) {
             continue;
@@ -528,16 +532,16 @@ f32 find_floor(f32 xPos, f32 yPos, f32 zPos, struct Surface **pfloor) {
     //! (Parallel Universes) Because position is casted to an s16, reaching higher
     // float locations  can return floors despite them not existing there.
     //(Dynamic floors will unload due to the range.)
-    s16 x = (s16) xPos;
+    s16 x = (s16) xPos / BOUNDS_EXTENSION;
     s16 y = (s16) yPos;
-    s16 z = (s16) zPos;
+    s16 z = (s16) zPos / BOUNDS_EXTENSION;
 
     *pfloor = NULL;
 
-    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_MAX) {
+    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
-    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_MAX) {
+    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
 
